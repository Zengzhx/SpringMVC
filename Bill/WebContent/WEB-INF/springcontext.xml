<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx.xsd  
    http://www.springframework.org/schema/jdbc  
    http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd  
    http://www.springframework.org/schema/cache  
    http://www.springframework.org/schema/cache/spring-cache-4.1.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd  
    http://www.springframework.org/schema/util  
    http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">


	<!-- 开启注解模式驱动 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<!-- don't handle the static resource -->
	 <mvc:default-servlet-handler />
	
	<!-- 这个类用来启动基于Spring MVC的注解功能，将控制器与方法映射加入到容器中 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"></bean> 
		配置了<mvc:annotation-driven />，他会自动注册这个bean,就不须要我们显示的注册这个bean了。 -->
		
		
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />-->
	
	
	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com.zengzhx.*" />
	

	<!-- 视图解释类 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
	</bean>

	<!-- 对静态资源文件的访问 方案一 （二选一） -->
	<!-- <mvc:default-servlet-handler/> -->
	<!-- 对静态资源文件的访问 方案二 （二选一） -->
	<mvc:resources mapping="/images/**" location="/images/"
		cache-period="31556926" />
	<mvc:resources mapping="/js/**" location="/js/"
		cache-period="31556926" />
	<mvc:resources mapping="/css/**" location="/css/"
		cache-period="31556926" />

	<!-- set注入 -->
	<!-- <bean id="Person" class="com.ez.dp.model.Person"> <property name="name" 
		value="zhangsan"></property> <property name="age" value="21"></property> 
		</bean> <bean id="de" class="com.ez.dp.action.demoAction"></bean> -->


	<!--配置拦截器, 多个拦截器,顺序执行 -->  
	<mvc:interceptors>    
   		 <mvc:interceptor>    
	        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
	       	 <!-- <mvc:mapping path="/" />   -->
	       	<!--  <mvc:mapping path="/user/**" />  -->
	       	 <!-- <mvc:mapping path="/**" /> -->
	       	 <mvc:mapping path="/"/>
       		 <bean class="com.zengzhx.dp.Inteceptor.myInteceptor"></bean>    
        </mvc:interceptor>  
    </mvc:interceptors>
    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  


	<import resource="contexttow.xml" />
</beans>